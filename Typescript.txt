2. Problem Statement:
1. Implement a simple Calculator to demonstrate the usage of different data types (
include any, never)
2. Create a base class Student with properties like name, studentId, grade, and a method
getDetails() to display student information.
○ Create a subclass GraduateStudent that extends Student with additional
properties like thesisTopic and a method getThesisTopic().
○ Override the getDetails() method in GraduateStudent to display specific
information.
○ Create a non-subclass LibraryAccount (which does not inherit from Student)
with properties like accountId, booksIssued, and a method getLibraryInfo().
○ Demonstrate composition over inheritance by associating a LibraryAccount
object with a Student object instead of inheriting from Student.
○ Create instances of Student, GraduateStudent, and LibraryAccount, call their
methods, and observe the behavior of inheritance versus independent class
structures.

3. Write a TypeScript program that demonstrates the usage of generics to create a
function capable of either adding two numbers or concatenating two strings. The
function should work with both numbers and strings
4. Design an employee management system using TypeScript. Create an Employee
interface with properties for name, id, and role, and a method getDetails() that returns
employee details. Then, create two classes, Manager and Developer, that implement
the Employee interface. The Manager class should include a department property and
override the getDetails() method to include the department. The Developer class
should include a programmingLanguages array property and override the getDetails()
method to include the programming languages. Finally, demonstrate the solution by
creating instances of both Manager and Developer classes and displaying their details
using the getDetails() method.
